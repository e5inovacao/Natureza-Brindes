// Teste final para verificar se a corre√ß√£o do filtro de agenda est√° funcionando
const { default: fetch } = require('node-fetch');

async function testFinalAgendaFix() {
  try {
    console.log('üéØ TESTE FINAL - CORRE√á√ÉO DO FILTRO DE AGENDA');
    console.log('=' .repeat(60));
    
    // Buscar todos os produtos
    let allProducts = [];
    let currentPage = 1;
    let totalPages = 1;
    
    do {
      const response = await fetch(`http://localhost:3005/api/products?page=${currentPage}&limit=100&sort=featured`);
      const data = await response.json();
      
      if (!data.success) break;
      
      allProducts = allProducts.concat(data.data.items);
      totalPages = data.data.pagination.totalPages;
      currentPage++;
    } while (currentPage <= totalPages);
    
    console.log(`‚úÖ Total de produtos carregados: ${allProducts.length}`);
    
    // Aplicar filtro EXATO como o frontend corrigido faz
    console.log('\nüîß Aplicando filtro corrigido (com .trim()):');
    const agendaProductsFixed = allProducts.filter(product => 
      product.name.toLowerCase().trim().includes('agenda')
    );
    
    console.log(`üìù Produtos com "agenda" (filtro corrigido): ${agendaProductsFixed.length}`);
    
    // Comparar com filtro antigo (sem .trim())
    const agendaProductsOld = allProducts.filter(product => 
      product.name.toLowerCase().includes('agenda')
    );
    
    console.log(`üìù Produtos com "agenda" (filtro antigo): ${agendaProductsOld.length}`);
    
    if (agendaProductsFixed.length > agendaProductsOld.length) {
      console.log(`üéâ MELHORIA! O filtro corrigido encontrou ${agendaProductsFixed.length - agendaProductsOld.length} produtos a mais!`);
    }
    
    // Listar todos os produtos encontrados
    console.log('\nüìã PRODUTOS ENCONTRADOS COM FILTRO CORRIGIDO:');
    agendaProductsFixed.forEach((product, index) => {
      const hasLeadingSpace = product.name !== product.name.trim();
      console.log(`${index + 1}. "${product.name}" ${hasLeadingSpace ? '(tinha espa√ßo extra)' : ''}`);
    });
    
    // Verificar produtos espec√≠ficos
    console.log('\nüéØ VERIFICA√á√ÉO DOS PRODUTOS ESPEC√çFICOS:');
    const specificProducts = [
      'AGENDA DI√ÅRIA 2026',
      'Agenda em corti√ßa',
      'Agenda em corti√ßa e linho'
    ];
    
    let foundCount = 0;
    specificProducts.forEach(targetName => {
      // Busca com trim (como o frontend corrigido)
      const found = agendaProductsFixed.find(p => p.name.trim() === targetName);
      if (found) {
        console.log(`   ‚úÖ "${targetName}" - ENCONTRADO!`);
        foundCount++;
      } else {
        console.log(`   ‚ùå "${targetName}" - n√£o encontrado`);
        // Mostrar produtos similares
        const similar = agendaProductsFixed.filter(p => 
          p.name.toLowerCase().includes(targetName.toLowerCase().split(' ')[0])
        );
        if (similar.length > 0) {
          console.log(`      Similares: ${similar.map(p => `"${p.name.trim()}"`).join(', ')}`);
        }
      }
    });
    
    // Resultado final
    console.log('\n' + '=' .repeat(60));
    console.log('üèÜ RESULTADO FINAL:');
    console.log(`‚úÖ Total de agendas encontradas: ${agendaProductsFixed.length}`);
    console.log(`‚úÖ Produtos espec√≠ficos encontrados: ${foundCount}/${specificProducts.length}`);
    
    if (agendaProductsFixed.length >= 14) {
      console.log('\nüéâ SUCESSO COMPLETO!');
      console.log('   ‚úÖ Todas as agendas est√£o sendo encontradas');
      console.log('   ‚úÖ O filtro com .trim() resolve o problema dos espa√ßos extras');
      console.log('   ‚úÖ O frontend agora carrega todos os produtos antes de filtrar');
      console.log('   ‚úÖ As 7 "AGENDA DI√ÅRIA 2026" e outras agendas est√£o dispon√≠veis');
      
      console.log('\nüöÄ PR√ìXIMOS PASSOS:');
      console.log('   1. Abrir o site no navegador');
      console.log('   2. Clicar na categoria "Agenda"');
      console.log('   3. Verificar se todos os produtos aparecem');
      console.log('   4. Confirmar que "AGENDA DI√ÅRIA 2026" est√° vis√≠vel');
      
    } else {
      console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Menos agendas encontradas do que esperado');
      console.log('   Pode haver outros problemas que precisam ser investigados.');
    }
    
    // Mostrar estat√≠sticas detalhadas
    console.log('\nüìä ESTAT√çSTICAS DETALHADAS:');
    const agendaTypes = {};
    agendaProductsFixed.forEach(product => {
      const name = product.name.trim();
      agendaTypes[name] = (agendaTypes[name] || 0) + 1;
    });
    
    Object.entries(agendaTypes)
      .sort(([,a], [,b]) => b - a)
      .forEach(([name, count]) => {
        console.log(`   ${count}x "${name}"`);
      });
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

testFinalAgendaFix();