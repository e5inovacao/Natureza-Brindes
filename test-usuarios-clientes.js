import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  console.log('VITE_SUPABASE_URL:', supabaseUrl ? '‚úì Definida' : '‚ùå N√£o definida');
  console.log('VITE_SUPABASE_ANON_KEY:', supabaseKey ? '‚úì Definida' : '‚ùå N√£o definida');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Dados de teste
const testUserData = {
  nome: 'Jo√£o Silva Teste',
  telefone: '(11) 99999-9999',
  email: 'joao.teste@email.com',
  empresa: 'Empresa Teste LTDA',
  cnpj: '12.345.678/0001-90',
  endereco: {
    rua: 'Rua Teste, 123',
    cidade: 'S√£o Paulo',
    estado: 'SP',
    cep: '01234-567'
  },
  consultor_id: null
};

async function testDirectInsert() {
  console.log('\nüîç TESTE 1: Inser√ß√£o direta na tabela usuarios_clientes');
  console.log('Dados de teste:', JSON.stringify(testUserData, null, 2));
  
  try {
    const { data, error } = await supabase
      .from('usuarios_clientes')
      .insert([testUserData])
      .select();
    
    if (error) {
      console.error('‚ùå Erro na inser√ß√£o direta:', error);
      console.error('C√≥digo do erro:', error.code);
      console.error('Detalhes:', error.details);
      console.error('Hint:', error.hint);
      console.error('Message:', error.message);
      return false;
    }
    
    console.log('‚úÖ Inser√ß√£o direta bem-sucedida!');
    console.log('Dados inseridos:', data);
    return data[0];
  } catch (err) {
    console.error('‚ùå Exce√ß√£o durante inser√ß√£o direta:', err);
    return false;
  }
}

async function checkRLSPolicies() {
  console.log('\nüîç TESTE 2: Verifica√ß√£o das pol√≠ticas RLS');
  
  try {
    // Verificar se conseguimos ler a tabela
    const { data, error } = await supabase
      .from('usuarios_clientes')
      .select('id, nome, email')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erro ao ler tabela usuarios_clientes:', error);
      return false;
    }
    
    console.log('‚úÖ Leitura da tabela permitida');
    console.log('Registros encontrados:', data?.length || 0);
    
    // Verificar permiss√µes de inser√ß√£o
    const testInsert = {
      nome: 'Teste RLS',
      email: 'teste.rls@email.com'
    };
    
    const { data: insertData, error: insertError } = await supabase
      .from('usuarios_clientes')
      .insert([testInsert])
      .select();
    
    if (insertError) {
      console.error('‚ùå Erro de permiss√£o na inser√ß√£o:', insertError);
      return false;
    }
    
    console.log('‚úÖ Inser√ß√£o permitida pelas pol√≠ticas RLS');
    
    // Limpar dados de teste
    if (insertData && insertData[0]) {
      await supabase
        .from('usuarios_clientes')
        .delete()
        .eq('id', insertData[0].id);
      console.log('üßπ Dados de teste removidos');
    }
    
    return true;
  } catch (err) {
    console.error('‚ùå Exce√ß√£o durante verifica√ß√£o RLS:', err);
    return false;
  }
}

async function testGetOrCreateUser() {
  console.log('\nüîç TESTE 3: Fun√ß√£o getOrCreateUser');
  
  // Simular a l√≥gica da fun√ß√£o getOrCreateUser
  const customerData = {
    name: testUserData.nome,
    phone: testUserData.telefone,
    email: testUserData.email,
    company: testUserData.empresa,
    cnpj: testUserData.cnpj,
    address: testUserData.endereco
  };
  
  console.log('Dados do cliente:', JSON.stringify(customerData, null, 2));
  
  try {
    // 1. Buscar usu√°rio existente por email
    console.log('\nüìß Buscando usu√°rio por email...');
    const { data: existingByEmail, error: emailError } = await supabase
      .from('usuarios_clientes')
      .select('*')
      .eq('email', customerData.email)
      .single();
    
    if (emailError && emailError.code !== 'PGRST116') {
      console.error('‚ùå Erro ao buscar por email:', emailError);
    } else if (existingByEmail) {
      console.log('‚úÖ Usu√°rio encontrado por email:', existingByEmail.id);
      return existingByEmail;
    } else {
      console.log('‚ÑπÔ∏è Nenhum usu√°rio encontrado por email');
    }
    
    // 2. Buscar usu√°rio existente por telefone
    console.log('\nüì± Buscando usu√°rio por telefone...');
    const { data: existingByPhone, error: phoneError } = await supabase
      .from('usuarios_clientes')
      .select('*')
      .eq('telefone', customerData.phone)
      .single();
    
    if (phoneError && phoneError.code !== 'PGRST116') {
      console.error('‚ùå Erro ao buscar por telefone:', phoneError);
    } else if (existingByPhone) {
      console.log('‚úÖ Usu√°rio encontrado por telefone:', existingByPhone.id);
      return existingByPhone;
    } else {
      console.log('‚ÑπÔ∏è Nenhum usu√°rio encontrado por telefone');
    }
    
    // 3. Criar novo usu√°rio
    console.log('\n‚ûï Criando novo usu√°rio...');
    const newUserData = {
      nome: customerData.name,
      telefone: customerData.phone,
      email: customerData.email,
      empresa: customerData.company,
      cnpj: customerData.cnpj,
      endereco: customerData.address,
      consultor_id: null
    };
    
    console.log('Dados para inser√ß√£o:', JSON.stringify(newUserData, null, 2));
    
    const { data: newUser, error: createError } = await supabase
      .from('usuarios_clientes')
      .insert([newUserData])
      .select()
      .single();
    
    if (createError) {
      console.error('‚ùå Erro ao criar usu√°rio:', createError);
      console.error('C√≥digo:', createError.code);
      console.error('Detalhes:', createError.details);
      console.error('Hint:', createError.hint);
      return false;
    }
    
    console.log('‚úÖ Usu√°rio criado com sucesso!');
    console.log('Novo usu√°rio:', newUser);
    return newUser;
    
  } catch (err) {
    console.error('‚ùå Exce√ß√£o durante getOrCreateUser:', err);
    return false;
  }
}

async function checkTableStructure() {
  console.log('\nüîç TESTE 4: Verifica√ß√£o da estrutura da tabela');
  
  try {
    // Tentar inserir com campos obrigat√≥rios apenas
    const minimalData = {
      nome: 'Teste Estrutura'
    };
    
    const { data, error } = await supabase
      .from('usuarios_clientes')
      .insert([minimalData])
      .select();
    
    if (error) {
      console.error('‚ùå Erro com dados m√≠nimos:', error);
      
      // Verificar se √© problema de campo obrigat√≥rio
      if (error.message.includes('null value')) {
        console.log('‚ÑπÔ∏è Poss√≠vel campo obrigat√≥rio faltando');
      }
      
      return false;
    }
    
    console.log('‚úÖ Inser√ß√£o com dados m√≠nimos bem-sucedida');
    
    // Limpar dados de teste
    if (data && data[0]) {
      await supabase
        .from('usuarios_clientes')
        .delete()
        .eq('id', data[0].id);
      console.log('üßπ Dados de teste removidos');
    }
    
    return true;
  } catch (err) {
    console.error('‚ùå Exce√ß√£o durante verifica√ß√£o de estrutura:', err);
    return false;
  }
}

async function runAllTests() {
  console.log('üöÄ INICIANDO TESTES DA TABELA USUARIOS_CLIENTES');
  console.log('=' .repeat(60));
  
  const results = {
    directInsert: false,
    rlsPolicies: false,
    getOrCreateUser: false,
    tableStructure: false
  };
  
  // Executar todos os testes
  results.tableStructure = await checkTableStructure();
  results.rlsPolicies = await checkRLSPolicies();
  results.directInsert = await testDirectInsert();
  results.getOrCreateUser = await testGetOrCreateUser();
  
  // Resumo dos resultados
  console.log('\n' + '=' .repeat(60));
  console.log('üìä RESUMO DOS TESTES:');
  console.log('=' .repeat(60));
  
  console.log(`Estrutura da tabela: ${results.tableStructure ? '‚úÖ OK' : '‚ùå FALHOU'}`);
  console.log(`Pol√≠ticas RLS: ${results.rlsPolicies ? '‚úÖ OK' : '‚ùå FALHOU'}`);
  console.log(`Inser√ß√£o direta: ${results.directInsert ? '‚úÖ OK' : '‚ùå FALHOU'}`);
  console.log(`Fun√ß√£o getOrCreateUser: ${results.getOrCreateUser ? '‚úÖ OK' : '‚ùå FALHOU'}`);
  
  const allPassed = Object.values(results).every(result => result !== false);
  
  console.log('\n' + '=' .repeat(60));
  if (allPassed) {
    console.log('üéâ TODOS OS TESTES PASSARAM!');
    console.log('A tabela usuarios_clientes est√° funcionando corretamente.');
  } else {
    console.log('‚ö†Ô∏è ALGUNS TESTES FALHARAM!');
    console.log('Verifique os erros acima para identificar o problema.');
  }
  console.log('=' .repeat(60));
}

// Executar testes
runAllTests().catch(console.error);